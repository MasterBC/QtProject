// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baccarat.proto

#ifndef PROTOBUF_INCLUDED_baccarat_2eproto
#define PROTOBUF_INCLUDED_baccarat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gamecomm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_baccarat_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_baccarat_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_baccarat_2eproto();
namespace go {
class GameBaccaratBet;
class GameBaccaratBetDefaultTypeInternal;
extern GameBaccaratBetDefaultTypeInternal _GameBaccaratBet_default_instance_;
class GameBaccaratBetResult;
class GameBaccaratBetResultDefaultTypeInternal;
extern GameBaccaratBetResultDefaultTypeInternal _GameBaccaratBetResult_default_instance_;
class GameBaccaratEnter;
class GameBaccaratEnterDefaultTypeInternal;
extern GameBaccaratEnterDefaultTypeInternal _GameBaccaratEnter_default_instance_;
class GameBaccaratHost;
class GameBaccaratHostDefaultTypeInternal;
extern GameBaccaratHostDefaultTypeInternal _GameBaccaratHost_default_instance_;
class GameBaccaratOver;
class GameBaccaratOverDefaultTypeInternal;
extern GameBaccaratOverDefaultTypeInternal _GameBaccaratOver_default_instance_;
class GameBaccaratSuperHost;
class GameBaccaratSuperHostDefaultTypeInternal;
extern GameBaccaratSuperHostDefaultTypeInternal _GameBaccaratSuperHost_default_instance_;
}  // namespace go
namespace google {
namespace protobuf {
template<> ::go::GameBaccaratBet* Arena::CreateMaybeMessage<::go::GameBaccaratBet>(Arena*);
template<> ::go::GameBaccaratBetResult* Arena::CreateMaybeMessage<::go::GameBaccaratBetResult>(Arena*);
template<> ::go::GameBaccaratEnter* Arena::CreateMaybeMessage<::go::GameBaccaratEnter>(Arena*);
template<> ::go::GameBaccaratHost* Arena::CreateMaybeMessage<::go::GameBaccaratHost>(Arena*);
template<> ::go::GameBaccaratOver* Arena::CreateMaybeMessage<::go::GameBaccaratOver>(Arena*);
template<> ::go::GameBaccaratSuperHost* Arena::CreateMaybeMessage<::go::GameBaccaratSuperHost>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace go {

// ===================================================================

class GameBaccaratEnter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameBaccaratEnter) */ {
 public:
  GameBaccaratEnter();
  virtual ~GameBaccaratEnter();

  GameBaccaratEnter(const GameBaccaratEnter& from);

  inline GameBaccaratEnter& operator=(const GameBaccaratEnter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBaccaratEnter(GameBaccaratEnter&& from) noexcept
    : GameBaccaratEnter() {
    *this = ::std::move(from);
  }

  inline GameBaccaratEnter& operator=(GameBaccaratEnter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBaccaratEnter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBaccaratEnter* internal_default_instance() {
    return reinterpret_cast<const GameBaccaratEnter*>(
               &_GameBaccaratEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameBaccaratEnter* other);
  friend void swap(GameBaccaratEnter& a, GameBaccaratEnter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBaccaratEnter* New() const final {
    return CreateMaybeMessage<GameBaccaratEnter>(nullptr);
  }

  GameBaccaratEnter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBaccaratEnter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBaccaratEnter& from);
  void MergeFrom(const GameBaccaratEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBaccaratEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Chips = 4;
  int chips_size() const;
  void clear_chips();
  static const int kChipsFieldNumber = 4;
  ::google::protobuf::int32 chips(int index) const;
  void set_chips(int index, ::google::protobuf::int32 value);
  void add_chips(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chips() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chips();

  // repeated bytes AwardAreas = 6;
  int awardareas_size() const;
  void clear_awardareas();
  static const int kAwardAreasFieldNumber = 6;
  const ::std::string& awardareas(int index) const;
  ::std::string* mutable_awardareas(int index);
  void set_awardareas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_awardareas(int index, ::std::string&& value);
  #endif
  void set_awardareas(int index, const char* value);
  void set_awardareas(int index, const void* value, size_t size);
  ::std::string* add_awardareas();
  void add_awardareas(const ::std::string& value);
  #if LANG_CXX11
  void add_awardareas(::std::string&& value);
  #endif
  void add_awardareas(const char* value);
  void add_awardareas(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& awardareas() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_awardareas();

  // .go.UserList Players = 5;
  bool has_players() const;
  void clear_players();
  static const int kPlayersFieldNumber = 5;
  const ::go::UserList& players() const;
  ::go::UserList* release_players();
  ::go::UserList* mutable_players();
  void set_allocated_players(::go::UserList* players);

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int64 TimeStamp = 3;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // float BankerScore = 2;
  void clear_bankerscore();
  static const int kBankerScoreFieldNumber = 2;
  float bankerscore() const;
  void set_bankerscore(float value);

  // uint32 FreeTime = 7;
  void clear_freetime();
  static const int kFreeTimeFieldNumber = 7;
  ::google::protobuf::uint32 freetime() const;
  void set_freetime(::google::protobuf::uint32 value);

  // uint32 BetTime = 8;
  void clear_bettime();
  static const int kBetTimeFieldNumber = 8;
  ::google::protobuf::uint32 bettime() const;
  void set_bettime(::google::protobuf::uint32 value);

  // uint32 OpenTime = 9;
  void clear_opentime();
  static const int kOpenTimeFieldNumber = 9;
  ::google::protobuf::uint32 opentime() const;
  void set_opentime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameBaccaratEnter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chips_;
  mutable std::atomic<int> _chips_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> awardareas_;
  ::go::UserList* players_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int64 timestamp_;
  float bankerscore_;
  ::google::protobuf::uint32 freetime_;
  ::google::protobuf::uint32 bettime_;
  ::google::protobuf::uint32 opentime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baccarat_2eproto;
};
// -------------------------------------------------------------------

class GameBaccaratHost final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameBaccaratHost) */ {
 public:
  GameBaccaratHost();
  virtual ~GameBaccaratHost();

  GameBaccaratHost(const GameBaccaratHost& from);

  inline GameBaccaratHost& operator=(const GameBaccaratHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBaccaratHost(GameBaccaratHost&& from) noexcept
    : GameBaccaratHost() {
    *this = ::std::move(from);
  }

  inline GameBaccaratHost& operator=(GameBaccaratHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBaccaratHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBaccaratHost* internal_default_instance() {
    return reinterpret_cast<const GameBaccaratHost*>(
               &_GameBaccaratHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameBaccaratHost* other);
  friend void swap(GameBaccaratHost& a, GameBaccaratHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBaccaratHost* New() const final {
    return CreateMaybeMessage<GameBaccaratHost>(nullptr);
  }

  GameBaccaratHost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBaccaratHost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBaccaratHost& from);
  void MergeFrom(const GameBaccaratHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBaccaratHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // bool IsWant = 2;
  void clear_iswant();
  static const int kIsWantFieldNumber = 2;
  bool iswant() const;
  void set_iswant(bool value);

  // @@protoc_insertion_point(class_scope:go.GameBaccaratHost)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 userid_;
  bool iswant_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baccarat_2eproto;
};
// -------------------------------------------------------------------

class GameBaccaratSuperHost final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameBaccaratSuperHost) */ {
 public:
  GameBaccaratSuperHost();
  virtual ~GameBaccaratSuperHost();

  GameBaccaratSuperHost(const GameBaccaratSuperHost& from);

  inline GameBaccaratSuperHost& operator=(const GameBaccaratSuperHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBaccaratSuperHost(GameBaccaratSuperHost&& from) noexcept
    : GameBaccaratSuperHost() {
    *this = ::std::move(from);
  }

  inline GameBaccaratSuperHost& operator=(GameBaccaratSuperHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBaccaratSuperHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBaccaratSuperHost* internal_default_instance() {
    return reinterpret_cast<const GameBaccaratSuperHost*>(
               &_GameBaccaratSuperHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameBaccaratSuperHost* other);
  friend void swap(GameBaccaratSuperHost& a, GameBaccaratSuperHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBaccaratSuperHost* New() const final {
    return CreateMaybeMessage<GameBaccaratSuperHost>(nullptr);
  }

  GameBaccaratSuperHost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBaccaratSuperHost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBaccaratSuperHost& from);
  void MergeFrom(const GameBaccaratSuperHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBaccaratSuperHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // bool IsWant = 2;
  void clear_iswant();
  static const int kIsWantFieldNumber = 2;
  bool iswant() const;
  void set_iswant(bool value);

  // @@protoc_insertion_point(class_scope:go.GameBaccaratSuperHost)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 userid_;
  bool iswant_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baccarat_2eproto;
};
// -------------------------------------------------------------------

class GameBaccaratBet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameBaccaratBet) */ {
 public:
  GameBaccaratBet();
  virtual ~GameBaccaratBet();

  GameBaccaratBet(const GameBaccaratBet& from);

  inline GameBaccaratBet& operator=(const GameBaccaratBet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBaccaratBet(GameBaccaratBet&& from) noexcept
    : GameBaccaratBet() {
    *this = ::std::move(from);
  }

  inline GameBaccaratBet& operator=(GameBaccaratBet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBaccaratBet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBaccaratBet* internal_default_instance() {
    return reinterpret_cast<const GameBaccaratBet*>(
               &_GameBaccaratBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GameBaccaratBet* other);
  friend void swap(GameBaccaratBet& a, GameBaccaratBet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBaccaratBet* New() const final {
    return CreateMaybeMessage<GameBaccaratBet>(nullptr);
  }

  GameBaccaratBet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBaccaratBet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBaccaratBet& from);
  void MergeFrom(const GameBaccaratBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBaccaratBet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 BetArea = 1;
  void clear_betarea();
  static const int kBetAreaFieldNumber = 1;
  ::google::protobuf::int32 betarea() const;
  void set_betarea(::google::protobuf::int32 value);

  // float BetScore = 2;
  void clear_betscore();
  static const int kBetScoreFieldNumber = 2;
  float betscore() const;
  void set_betscore(float value);

  // @@protoc_insertion_point(class_scope:go.GameBaccaratBet)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 betarea_;
  float betscore_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baccarat_2eproto;
};
// -------------------------------------------------------------------

class GameBaccaratBetResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameBaccaratBetResult) */ {
 public:
  GameBaccaratBetResult();
  virtual ~GameBaccaratBetResult();

  GameBaccaratBetResult(const GameBaccaratBetResult& from);

  inline GameBaccaratBetResult& operator=(const GameBaccaratBetResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBaccaratBetResult(GameBaccaratBetResult&& from) noexcept
    : GameBaccaratBetResult() {
    *this = ::std::move(from);
  }

  inline GameBaccaratBetResult& operator=(GameBaccaratBetResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBaccaratBetResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBaccaratBetResult* internal_default_instance() {
    return reinterpret_cast<const GameBaccaratBetResult*>(
               &_GameBaccaratBetResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GameBaccaratBetResult* other);
  friend void swap(GameBaccaratBetResult& a, GameBaccaratBetResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBaccaratBetResult* New() const final {
    return CreateMaybeMessage<GameBaccaratBetResult>(nullptr);
  }

  GameBaccaratBetResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBaccaratBetResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBaccaratBetResult& from);
  void MergeFrom(const GameBaccaratBetResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBaccaratBetResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Hints = 2;
  void clear_hints();
  static const int kHintsFieldNumber = 2;
  const ::std::string& hints() const;
  void set_hints(const ::std::string& value);
  #if LANG_CXX11
  void set_hints(::std::string&& value);
  #endif
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  ::std::string* mutable_hints();
  ::std::string* release_hints();
  void set_allocated_hints(::std::string* hints);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameBaccaratBetResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hints_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baccarat_2eproto;
};
// -------------------------------------------------------------------

class GameBaccaratOver final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameBaccaratOver) */ {
 public:
  GameBaccaratOver();
  virtual ~GameBaccaratOver();

  GameBaccaratOver(const GameBaccaratOver& from);

  inline GameBaccaratOver& operator=(const GameBaccaratOver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBaccaratOver(GameBaccaratOver&& from) noexcept
    : GameBaccaratOver() {
    *this = ::std::move(from);
  }

  inline GameBaccaratOver& operator=(GameBaccaratOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBaccaratOver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBaccaratOver* internal_default_instance() {
    return reinterpret_cast<const GameBaccaratOver*>(
               &_GameBaccaratOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GameBaccaratOver* other);
  friend void swap(GameBaccaratOver& a, GameBaccaratOver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBaccaratOver* New() const final {
    return CreateMaybeMessage<GameBaccaratOver>(nullptr);
  }

  GameBaccaratOver* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBaccaratOver>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBaccaratOver& from);
  void MergeFrom(const GameBaccaratOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBaccaratOver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes AwardArea = 1;
  void clear_awardarea();
  static const int kAwardAreaFieldNumber = 1;
  const ::std::string& awardarea() const;
  void set_awardarea(const ::std::string& value);
  #if LANG_CXX11
  void set_awardarea(::std::string&& value);
  #endif
  void set_awardarea(const char* value);
  void set_awardarea(const void* value, size_t size);
  ::std::string* mutable_awardarea();
  ::std::string* release_awardarea();
  void set_allocated_awardarea(::std::string* awardarea);

  // bytes PlayerCard = 2;
  void clear_playercard();
  static const int kPlayerCardFieldNumber = 2;
  const ::std::string& playercard() const;
  void set_playercard(const ::std::string& value);
  #if LANG_CXX11
  void set_playercard(::std::string&& value);
  #endif
  void set_playercard(const char* value);
  void set_playercard(const void* value, size_t size);
  ::std::string* mutable_playercard();
  ::std::string* release_playercard();
  void set_allocated_playercard(::std::string* playercard);

  // bytes BankerCard = 3;
  void clear_bankercard();
  static const int kBankerCardFieldNumber = 3;
  const ::std::string& bankercard() const;
  void set_bankercard(const ::std::string& value);
  #if LANG_CXX11
  void set_bankercard(::std::string&& value);
  #endif
  void set_bankercard(const char* value);
  void set_bankercard(const void* value, size_t size);
  ::std::string* mutable_bankercard();
  ::std::string* release_bankercard();
  void set_allocated_bankercard(::std::string* bankercard);

  // float Acquire = 4;
  void clear_acquire();
  static const int kAcquireFieldNumber = 4;
  float acquire() const;
  void set_acquire(float value);

  // @@protoc_insertion_point(class_scope:go.GameBaccaratOver)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr awardarea_;
  ::google::protobuf::internal::ArenaStringPtr playercard_;
  ::google::protobuf::internal::ArenaStringPtr bankercard_;
  float acquire_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baccarat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameBaccaratEnter

// uint64 UserID = 1;
inline void GameBaccaratEnter::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameBaccaratEnter::userid() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.UserID)
  return userid_;
}
inline void GameBaccaratEnter::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.UserID)
}

// float BankerScore = 2;
inline void GameBaccaratEnter::clear_bankerscore() {
  bankerscore_ = 0;
}
inline float GameBaccaratEnter::bankerscore() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.BankerScore)
  return bankerscore_;
}
inline void GameBaccaratEnter::set_bankerscore(float value) {
  
  bankerscore_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.BankerScore)
}

// int64 TimeStamp = 3;
inline void GameBaccaratEnter::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameBaccaratEnter::timestamp() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.TimeStamp)
  return timestamp_;
}
inline void GameBaccaratEnter::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.TimeStamp)
}

// repeated int32 Chips = 4;
inline int GameBaccaratEnter::chips_size() const {
  return chips_.size();
}
inline void GameBaccaratEnter::clear_chips() {
  chips_.Clear();
}
inline ::google::protobuf::int32 GameBaccaratEnter::chips(int index) const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.Chips)
  return chips_.Get(index);
}
inline void GameBaccaratEnter::set_chips(int index, ::google::protobuf::int32 value) {
  chips_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.Chips)
}
inline void GameBaccaratEnter::add_chips(::google::protobuf::int32 value) {
  chips_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameBaccaratEnter.Chips)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameBaccaratEnter::chips() const {
  // @@protoc_insertion_point(field_list:go.GameBaccaratEnter.Chips)
  return chips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameBaccaratEnter::mutable_chips() {
  // @@protoc_insertion_point(field_mutable_list:go.GameBaccaratEnter.Chips)
  return &chips_;
}

// .go.UserList Players = 5;
inline bool GameBaccaratEnter::has_players() const {
  return this != internal_default_instance() && players_ != nullptr;
}
inline const ::go::UserList& GameBaccaratEnter::players() const {
  const ::go::UserList* p = players_;
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.Players)
  return p != nullptr ? *p : *reinterpret_cast<const ::go::UserList*>(
      &::go::_UserList_default_instance_);
}
inline ::go::UserList* GameBaccaratEnter::release_players() {
  // @@protoc_insertion_point(field_release:go.GameBaccaratEnter.Players)
  
  ::go::UserList* temp = players_;
  players_ = nullptr;
  return temp;
}
inline ::go::UserList* GameBaccaratEnter::mutable_players() {
  
  if (players_ == nullptr) {
    auto* p = CreateMaybeMessage<::go::UserList>(GetArenaNoVirtual());
    players_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.GameBaccaratEnter.Players)
  return players_;
}
inline void GameBaccaratEnter::set_allocated_players(::go::UserList* players) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(players_);
  }
  if (players) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      players = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, players, submessage_arena);
    }
    
  } else {
    
  }
  players_ = players;
  // @@protoc_insertion_point(field_set_allocated:go.GameBaccaratEnter.Players)
}

// repeated bytes AwardAreas = 6;
inline int GameBaccaratEnter::awardareas_size() const {
  return awardareas_.size();
}
inline void GameBaccaratEnter::clear_awardareas() {
  awardareas_.Clear();
}
inline const ::std::string& GameBaccaratEnter::awardareas(int index) const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.AwardAreas)
  return awardareas_.Get(index);
}
inline ::std::string* GameBaccaratEnter::mutable_awardareas(int index) {
  // @@protoc_insertion_point(field_mutable:go.GameBaccaratEnter.AwardAreas)
  return awardareas_.Mutable(index);
}
inline void GameBaccaratEnter::set_awardareas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.AwardAreas)
  awardareas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GameBaccaratEnter::set_awardareas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.AwardAreas)
  awardareas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GameBaccaratEnter::set_awardareas(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  awardareas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:go.GameBaccaratEnter.AwardAreas)
}
inline void GameBaccaratEnter::set_awardareas(int index, const void* value, size_t size) {
  awardareas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:go.GameBaccaratEnter.AwardAreas)
}
inline ::std::string* GameBaccaratEnter::add_awardareas() {
  // @@protoc_insertion_point(field_add_mutable:go.GameBaccaratEnter.AwardAreas)
  return awardareas_.Add();
}
inline void GameBaccaratEnter::add_awardareas(const ::std::string& value) {
  awardareas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:go.GameBaccaratEnter.AwardAreas)
}
#if LANG_CXX11
inline void GameBaccaratEnter::add_awardareas(::std::string&& value) {
  awardareas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:go.GameBaccaratEnter.AwardAreas)
}
#endif
inline void GameBaccaratEnter::add_awardareas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  awardareas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:go.GameBaccaratEnter.AwardAreas)
}
inline void GameBaccaratEnter::add_awardareas(const void* value, size_t size) {
  awardareas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:go.GameBaccaratEnter.AwardAreas)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GameBaccaratEnter::awardareas() const {
  // @@protoc_insertion_point(field_list:go.GameBaccaratEnter.AwardAreas)
  return awardareas_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GameBaccaratEnter::mutable_awardareas() {
  // @@protoc_insertion_point(field_mutable_list:go.GameBaccaratEnter.AwardAreas)
  return &awardareas_;
}

// uint32 FreeTime = 7;
inline void GameBaccaratEnter::clear_freetime() {
  freetime_ = 0u;
}
inline ::google::protobuf::uint32 GameBaccaratEnter::freetime() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.FreeTime)
  return freetime_;
}
inline void GameBaccaratEnter::set_freetime(::google::protobuf::uint32 value) {
  
  freetime_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.FreeTime)
}

// uint32 BetTime = 8;
inline void GameBaccaratEnter::clear_bettime() {
  bettime_ = 0u;
}
inline ::google::protobuf::uint32 GameBaccaratEnter::bettime() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.BetTime)
  return bettime_;
}
inline void GameBaccaratEnter::set_bettime(::google::protobuf::uint32 value) {
  
  bettime_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.BetTime)
}

// uint32 OpenTime = 9;
inline void GameBaccaratEnter::clear_opentime() {
  opentime_ = 0u;
}
inline ::google::protobuf::uint32 GameBaccaratEnter::opentime() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratEnter.OpenTime)
  return opentime_;
}
inline void GameBaccaratEnter::set_opentime(::google::protobuf::uint32 value) {
  
  opentime_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratEnter.OpenTime)
}

// -------------------------------------------------------------------

// GameBaccaratHost

// uint64 UserID = 1;
inline void GameBaccaratHost::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameBaccaratHost::userid() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratHost.UserID)
  return userid_;
}
inline void GameBaccaratHost::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratHost.UserID)
}

// bool IsWant = 2;
inline void GameBaccaratHost::clear_iswant() {
  iswant_ = false;
}
inline bool GameBaccaratHost::iswant() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratHost.IsWant)
  return iswant_;
}
inline void GameBaccaratHost::set_iswant(bool value) {
  
  iswant_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratHost.IsWant)
}

// -------------------------------------------------------------------

// GameBaccaratSuperHost

// uint64 UserID = 1;
inline void GameBaccaratSuperHost::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameBaccaratSuperHost::userid() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratSuperHost.UserID)
  return userid_;
}
inline void GameBaccaratSuperHost::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratSuperHost.UserID)
}

// bool IsWant = 2;
inline void GameBaccaratSuperHost::clear_iswant() {
  iswant_ = false;
}
inline bool GameBaccaratSuperHost::iswant() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratSuperHost.IsWant)
  return iswant_;
}
inline void GameBaccaratSuperHost::set_iswant(bool value) {
  
  iswant_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratSuperHost.IsWant)
}

// -------------------------------------------------------------------

// GameBaccaratBet

// int32 BetArea = 1;
inline void GameBaccaratBet::clear_betarea() {
  betarea_ = 0;
}
inline ::google::protobuf::int32 GameBaccaratBet::betarea() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratBet.BetArea)
  return betarea_;
}
inline void GameBaccaratBet::set_betarea(::google::protobuf::int32 value) {
  
  betarea_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratBet.BetArea)
}

// float BetScore = 2;
inline void GameBaccaratBet::clear_betscore() {
  betscore_ = 0;
}
inline float GameBaccaratBet::betscore() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratBet.BetScore)
  return betscore_;
}
inline void GameBaccaratBet::set_betscore(float value) {
  
  betscore_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratBet.BetScore)
}

// -------------------------------------------------------------------

// GameBaccaratBetResult

// int32 State = 1;
inline void GameBaccaratBetResult::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 GameBaccaratBetResult::state() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratBetResult.State)
  return state_;
}
inline void GameBaccaratBetResult::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratBetResult.State)
}

// string Hints = 2;
inline void GameBaccaratBetResult::clear_hints() {
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameBaccaratBetResult::hints() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratBetResult.Hints)
  return hints_.GetNoArena();
}
inline void GameBaccaratBetResult::set_hints(const ::std::string& value) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameBaccaratBetResult.Hints)
}
#if LANG_CXX11
inline void GameBaccaratBetResult::set_hints(::std::string&& value) {
  
  hints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameBaccaratBetResult.Hints)
}
#endif
inline void GameBaccaratBetResult::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameBaccaratBetResult.Hints)
}
inline void GameBaccaratBetResult::set_hints(const char* value, size_t size) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameBaccaratBetResult.Hints)
}
inline ::std::string* GameBaccaratBetResult::mutable_hints() {
  
  // @@protoc_insertion_point(field_mutable:go.GameBaccaratBetResult.Hints)
  return hints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameBaccaratBetResult::release_hints() {
  // @@protoc_insertion_point(field_release:go.GameBaccaratBetResult.Hints)
  
  return hints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameBaccaratBetResult::set_allocated_hints(::std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hints);
  // @@protoc_insertion_point(field_set_allocated:go.GameBaccaratBetResult.Hints)
}

// -------------------------------------------------------------------

// GameBaccaratOver

// bytes AwardArea = 1;
inline void GameBaccaratOver::clear_awardarea() {
  awardarea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameBaccaratOver::awardarea() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratOver.AwardArea)
  return awardarea_.GetNoArena();
}
inline void GameBaccaratOver::set_awardarea(const ::std::string& value) {
  
  awardarea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameBaccaratOver.AwardArea)
}
#if LANG_CXX11
inline void GameBaccaratOver::set_awardarea(::std::string&& value) {
  
  awardarea_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameBaccaratOver.AwardArea)
}
#endif
inline void GameBaccaratOver::set_awardarea(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awardarea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameBaccaratOver.AwardArea)
}
inline void GameBaccaratOver::set_awardarea(const void* value, size_t size) {
  
  awardarea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameBaccaratOver.AwardArea)
}
inline ::std::string* GameBaccaratOver::mutable_awardarea() {
  
  // @@protoc_insertion_point(field_mutable:go.GameBaccaratOver.AwardArea)
  return awardarea_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameBaccaratOver::release_awardarea() {
  // @@protoc_insertion_point(field_release:go.GameBaccaratOver.AwardArea)
  
  return awardarea_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameBaccaratOver::set_allocated_awardarea(::std::string* awardarea) {
  if (awardarea != nullptr) {
    
  } else {
    
  }
  awardarea_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), awardarea);
  // @@protoc_insertion_point(field_set_allocated:go.GameBaccaratOver.AwardArea)
}

// bytes PlayerCard = 2;
inline void GameBaccaratOver::clear_playercard() {
  playercard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameBaccaratOver::playercard() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratOver.PlayerCard)
  return playercard_.GetNoArena();
}
inline void GameBaccaratOver::set_playercard(const ::std::string& value) {
  
  playercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameBaccaratOver.PlayerCard)
}
#if LANG_CXX11
inline void GameBaccaratOver::set_playercard(::std::string&& value) {
  
  playercard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameBaccaratOver.PlayerCard)
}
#endif
inline void GameBaccaratOver::set_playercard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameBaccaratOver.PlayerCard)
}
inline void GameBaccaratOver::set_playercard(const void* value, size_t size) {
  
  playercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameBaccaratOver.PlayerCard)
}
inline ::std::string* GameBaccaratOver::mutable_playercard() {
  
  // @@protoc_insertion_point(field_mutable:go.GameBaccaratOver.PlayerCard)
  return playercard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameBaccaratOver::release_playercard() {
  // @@protoc_insertion_point(field_release:go.GameBaccaratOver.PlayerCard)
  
  return playercard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameBaccaratOver::set_allocated_playercard(::std::string* playercard) {
  if (playercard != nullptr) {
    
  } else {
    
  }
  playercard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playercard);
  // @@protoc_insertion_point(field_set_allocated:go.GameBaccaratOver.PlayerCard)
}

// bytes BankerCard = 3;
inline void GameBaccaratOver::clear_bankercard() {
  bankercard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameBaccaratOver::bankercard() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratOver.BankerCard)
  return bankercard_.GetNoArena();
}
inline void GameBaccaratOver::set_bankercard(const ::std::string& value) {
  
  bankercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameBaccaratOver.BankerCard)
}
#if LANG_CXX11
inline void GameBaccaratOver::set_bankercard(::std::string&& value) {
  
  bankercard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameBaccaratOver.BankerCard)
}
#endif
inline void GameBaccaratOver::set_bankercard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bankercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameBaccaratOver.BankerCard)
}
inline void GameBaccaratOver::set_bankercard(const void* value, size_t size) {
  
  bankercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameBaccaratOver.BankerCard)
}
inline ::std::string* GameBaccaratOver::mutable_bankercard() {
  
  // @@protoc_insertion_point(field_mutable:go.GameBaccaratOver.BankerCard)
  return bankercard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameBaccaratOver::release_bankercard() {
  // @@protoc_insertion_point(field_release:go.GameBaccaratOver.BankerCard)
  
  return bankercard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameBaccaratOver::set_allocated_bankercard(::std::string* bankercard) {
  if (bankercard != nullptr) {
    
  } else {
    
  }
  bankercard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankercard);
  // @@protoc_insertion_point(field_set_allocated:go.GameBaccaratOver.BankerCard)
}

// float Acquire = 4;
inline void GameBaccaratOver::clear_acquire() {
  acquire_ = 0;
}
inline float GameBaccaratOver::acquire() const {
  // @@protoc_insertion_point(field_get:go.GameBaccaratOver.Acquire)
  return acquire_;
}
inline void GameBaccaratOver::set_acquire(float value) {
  
  acquire_ = value;
  // @@protoc_insertion_point(field_set:go.GameBaccaratOver.Acquire)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace go

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_baccarat_2eproto
